# Como ejecutar los contenedores por separado, es decir, sin Docker Compose:
# Abrir 2 terminales en la carpeta "docker"
# En la primera terminal ejecutar:

docker rm -f $(docker ps -a -q)
docker build -t mysql ./mysql
docker run --name mysql_server mysql

# Esperar a que ponga "MySQL ready" (o algo asi) y ejecutar sobre la segunda terminal:

docker build -t web_server ./web
docker run --rm -p 8080:8080 --link mysql_server:mysql_server --name web_server web_server


########## DOCKER COMPOSE #########
docker rm -f $(docker ps -a -q)
docker-compose up --build


############ ANGULAR ##############
# Compilar la aplicacion Angular con: ng build --prod --aot=false
# El resultado estara en la carpeta /angular/dist y lo deberemos copiar a /docker/angular/app
# Ojo, no se puede usar el modificador '--aot' porque hay algunas librerias que no son compatibles

docker rm -f $(docker ps -a -q)
docker build -t angular ./angular
docker run -dit -p 4200:80 --rm --name angular_frontend angular


############## API ################
# Al mover el JAR a la carpeta /docker/api recordar que el JAR no debe generar la base de datos
# La base de datos ya estara previamente cargada en otro contenedor a traves de un archivo SQL

docker rm -f $(docker ps -a -q)
docker build -t api_server ./api
docker run --rm --name api_server api


############## MYSQL ################
# Ejecutar Dockerfile

docker rm -f $(docker ps -a -q)
docker build -t mysql ./mysql
docker run --name mysql_server mysql
